from tpot import TPOTClassifier

from src.contracts.TpotParams import TPOTParams
from src.models.tpot_core_functions import _fit_tpot, _get_custom_cv


def train_tpot_classifier(function_params: TPOTParams):
    """
    This function train the tpot pipeline, print the pipeline validation score and predict export the python file
    generated by the tpot library

    Args:
        function_params: represents the TPOTParams dataclass that contains all the dataset and hyper parameters needed
        to use the function

    Returns: This function return the trained tpot pipeline with the prediction
    """

    scoring_arg = function_params.scoring

    if scoring_arg == "":
        scoring_arg = "f1_macro"

    # number of cross validation fold
    cv = 5
    x_train = function_params.dataset.X_train
    y_train = function_params.dataset.y_train

    if function_params.custom_validation:
        # cv represents the indexes to separate train from validation
        cv, final_x_train, final_y_train = _get_custom_cv(
            X_train=function_params.dataset.X_train,
            y_train=function_params.dataset.y_train,
            X_val=function_params.dataset.X_val,
            y_val=function_params.dataset.y_val,
        )
        x_train = final_x_train
        y_train = final_y_train

    model = TPOTClassifier(
        generations=function_params.generations,
        population_size=function_params.population_size,
        scoring=scoring_arg,
        cv=cv,
        config_dict=function_params.config_dict,
        random_state=100,
        use_dask=False,
        verbosity=2,
    )

    tpot, prediction = _fit_tpot(
        model,
        x_train,
        y_train,
        function_params.dataset.X_val,
        function_params.dataset.y_val,
        function_params.path_to_export,
    )

    return tpot, prediction